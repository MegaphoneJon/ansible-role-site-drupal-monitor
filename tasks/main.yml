---
# Drupal Nagios monitoring
- block:
  - name: Enable nagios module
    command: "drush --root={{ webroot }} en -y nagios"
    args:
      creates: "{{ webroot }}/sites/all/modules/nagios"
    become_user: "{{ run_as_user }}"

  - name: Configure nagios
    command: "drush --root={{ webroot }} vset {{ item }}"
    loop:
      - "nagios_cron_duration '480'"
      - "nagios_enable_nagios 1"
      - "nagios_enable_status_page 1"
      - "nagios_enable_status_page_get 0"
      - "nagios_func_cron 1"
      - "nagios_func_modules 1"
      - "nagios_func_nodes 1"
      - "nagios_func_requirements 1"
      - "nagios_func_session_anon 1"
      - "nagios_func_session_auth 1"
      - "nagios_func_themes 1"
      - "nagios_func_users 1"
      - "nagios_min_report_severity '2'"
      - "nagios_page_callback nagios_status_page"
      - "nagios_page_path nagios"
      - "nagios_show_outdated_names 1"
      - "nagios_status_critical_value '2'"
      - "nagios_status_ok_value '0'"
      - "nagios_status_unknown_value '3'"
      - "nagios_status_warning_value '1'"
      - "--format=json nagios_ignored_modules '{\"civicrm\":true}'"
      - "nagios_ua {{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/nagioskey create=true length=32') }}"
    become_user: "{{ run_as_user }}"
  when: cms == 'Drupal'

# Drupal CiviCRM monitoring
- block:
  - name: Enable Megaphone monitoring
    command: "cv en com.megaphonetech.monitoring"
    args:
      chdir: "{{ webroot }}"
    become_user: "{{ run_as_user }}"

  - name: Create a role for monitoring
    command: "drush --root={{ webroot }} role-create 'monitor'"
    args:
      chdir: "{{ webroot }}"
    register: create_monitoring_role
    become_user: "{{ run_as_user }}"
    changed_when: create_monitoring_role.rc == 0
    failed_when: not(create_monitoring_role.rc == 0 or (create_monitoring_role.stderr is defined and create_monitoring_role.stderr is search("Duplicate entry")))

    # drush 7 has a bug and can't handle this.
  - name: Add remote monitoring permission to monitor role
    command: "drush8 --root={{ webroot }} role-add-perm 'monitor' 'remote monitoring'"
    become_user: "{{ run_as_user }}"

    # We don't actually record the password because we don't care what it is.
  - name: Create a user for monitoring
    command: "drush --root={{ webroot }} user-create {{ monitoring_user }} --mail='{{ monitoring_email }}' --password='{{ lookup('password', '/dev/null length=32') }}'"
    register: create_monitoring_user
    become_user: "{{ run_as_user }}"
    changed_when: create_monitoring_user.rc == 0
    failed_when: not(create_monitoring_user.rc == 0 or create_monitoring_user.stderr is search("There is already a user account with the"))

  - name: Add the monitoring role to the monitoring user
    command: "drush --root={{ webroot }} user-add-role 'monitor' {{ monitoring_user }}"
    register: create_monitoring_user
    become_user: "{{ run_as_user }}"
    changed_when: create_monitoring_user.rc == 0
    failed_when: not(create_monitoring_user.rc == 0 or create_monitoring_user.stderr is search("There is already a user account with the email"))

  - name: Create a CiviCRM contact for the admin user
    shell: echo '{"contact_type":"Individual", "display_name":"{{ monitoring_email }}","api_key":"'{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/apikey create=true length=32') }}'","email":"{{ monitoring_email }}","options":{"match":"email"}}' | cv api contact.create --in=json
    args:
      chdir: "{{ webroot }}"
    become_user: "{{ run_as_user }}"
    when: civicrm == 'Yes'

  when: cms == 'Drupal' and contract_type is search("Civi Maintenance") and civicrm == 'Yes'