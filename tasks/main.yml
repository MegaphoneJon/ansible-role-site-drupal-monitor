---
# Drupal Nagios monitoring
- name: D10 drush path
  set_fact:
    d10_drush_path: "{{ gitroot }}/vendor/bin/drush"

- name: drush path
  set_fact:
    drush_path: "{{ d10_drush_path if cms == 'Drupal8' else 'drush' }}"

- block:
  - name: Install D8 Nagios module
    community.general.composer:
      command: "require"
      arguments: "drupal/nagios:^1.11"
      working_dir: "{{ gitroot }}"
    become_user: "{{ run_as_user }}"

  - name: git add Nagios
    command: git add -v -A
    args:
      chdir: "{{ gitroot }}"
    register: add_result
    become_user: "{{ run_as_user }}"
    changed_when: add_result.stdout != ''
    failed_when: add_result.stderr != ''

  - name: git commit Nagios
    command: "git commit -m 'Drupal Nagios'"
    args:
      chdir: "{{ gitroot }}"
    register: commit_result
    become_user: "{{ run_as_user }}"
    changed_when: commit_result.rc == 0
    failed_when: not(commit_result.rc == 0 or 'nothing to commit, working tree clean' in commit_result.stdout_lines)

  - name: git push
    command: git push
    args:
      chdir: "{{ gitroot }}"
    register: push_result_addl
    become_user: "{{ run_as_user }}"
    when: internal_repo == "1" and (git_repo_push_url is not search("https://"))
    changed_when: push_result_addl.rc == 0 and push_result_addl.stderr != 'Everything up-to-date'
    failed_when: not(push_result_addl.rc == 0)
  #FIXME: need to configure Nagios on D10.
  when: cms == 'Drupal8' and env == 'Dev'

- name: Enable nagios module
  command: "{{ drush_path }} --root={{ webroot }} en -y nagios"
  args:
    creates: "{{ webroot }}/sites/all/modules/nagios"
  become_user: "{{ run_as_user }}"
  when: (cms == 'Drupal' or cms == 'Drupal8') and env == 'Dev'

- name: Configure nagios
  command: "{{ drush_path }} --root={{ webroot }} vset {{ item }}"
  loop:
    - "nagios_cron_duration '480'"
    - "nagios_enable_nagios 1"
    - "nagios_enable_status_page 1"
    - "nagios_enable_status_page_get 0"
    - "nagios_func_cron 1"
    - "nagios_func_modules 1"
    - "nagios_func_nodes 1"
    - "nagios_func_requirements 1"
    - "nagios_func_session_anon 1"
    - "nagios_func_session_auth 1"
    - "nagios_func_themes 1"
    - "nagios_func_users 1"
    - "nagios_min_report_severity '2'"
    - "nagios_page_callback nagios_status_page"
    - "nagios_page_path nagios"
    - "nagios_show_outdated_names 1"
    - "nagios_status_critical_value '2'"
    - "nagios_status_ok_value '0'"
    - "nagios_status_unknown_value '3'"
    - "nagios_status_warning_value '1'"
    - "--format=json nagios_ignored_modules '{\"civicrm\":true}'"
    - "nagios_ua {{ lookup('community.general.passwordstore', client + '/' + hostname + '/' + bare_url + '/nagioskey create=true length=32') }}"
  become_user: "{{ run_as_user }}"
  when: cms == 'Drupal' and env == 'Live'

# Drupal CiviCRM monitoring
- block:
  - name: Enable Megaphone monitoring
    shell: "PATH=$HOME/bin:$PATH;cv en com.megaphonetech.monitoring"
    args:
      chdir: "{{ webroot }}"
    become_user: "{{ run_as_user }}"

  - name: Create a role for monitoring
    command: "{{ drush_path }} --root={{ webroot }} role-create 'monitor' 'Monitor'"
    args:
      chdir: "{{ webroot }}"
    register: create_monitoring_role
    become_user: "{{ run_as_user }}"
    changed_when: create_monitoring_role.rc == 0
    failed_when: not(create_monitoring_role.rc == 0 or (create_monitoring_role.stderr is defined and (create_monitoring_role.stderr is search("Duplicate entry") or create_monitoring_role.stderr is search("'user_role' entity with ID 'monitor' already exists"))))

  - name: Add remote monitoring permission to monitor role
    command: "{{ drush_path }} --root={{ webroot }} role-add-perm 'monitor' 'remote monitoring'"
    become_user: "{{ run_as_user }}"
    when: cms == 'Drupal'

  - name: Add remote monitoring permission to monitor role
    command: "{{ drush_path }} --root={{ webroot }} role-add-perm 'monitor' 'remote monitoring'"
    become_user: "{{ run_as_user }}"
    when: cms == 'Drupal8'

    # We don't actually record the password because we don't care what it is.
  - name: Create a user for monitoring
    command: "{{ drush_path }} --root={{ webroot }} user-create {{ monitoring_user }} --mail='{{ monitoring_email }}' --password='{{ lookup('password', '/dev/null length=32') }}'"
    register: create_monitoring_user
    become_user: "{{ run_as_user }}"
    changed_when: create_monitoring_user.rc == 0
    failed_when: not(create_monitoring_user.rc == 0 or create_monitoring_user.stderr is search("There is already a user account with the"))

  - name: Add the monitoring role to the monitoring user
    command: "{{ drush_path }} --root={{ webroot }} user-add-role 'monitor' {{ monitoring_user }}"
    register: create_monitoring_user
    become_user: "{{ run_as_user }}"
    changed_when: create_monitoring_user.rc == 0
    failed_when: not(create_monitoring_user.rc == 0 or create_monitoring_user.stderr is search("There is already a user account with the email"))

  - name: Create a CiviCRM contact for the admin user
    shell: PATH=$HOME/bin:$PATH;echo '{"contact_type":"Individual", "display_name":"{{ monitoring_email }}","api_key":"'{{ lookup('community.general.passwordstore', client + '/' + hostname + '/' + bare_url + '/civicrm_api_key create=true length=32 create=true length=32') }}'","email":"{{ monitoring_email }}","options":{"match":"email"}}' | cv api contact.create --in=json
    args:
      chdir: "{{ webroot }}"
    become_user: "{{ run_as_user }}"

  - name: Disable checks that we only want to see in the 'CiviCRM infrequent' checks
    shell: PATH=$HOME/bin:$PATH;echo '{"values":{"domain_id":"current_domain","name":"{{ item }}","is_active":false}}' | cv api4 StatusPreference.create --in=json
    args:
      chdir: "{{ webroot }}"
    become_user: "{{ run_as_user }}"
    with_items:
      - checkDirsWritable
      - checkUploadsAreNotAccessible
      - checkDirectoriesAreNotBrowseable
      - checkLogFileIsNotAccessible
      - checkCleanurls
    tags: be-quiet-civicrm

  when: (cms == 'Drupal' or cms == 'Drupal8') and contract_type is search("Civi Maintenance") and civicrm == 'Yes'
